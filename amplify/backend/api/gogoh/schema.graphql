type User
  @model
  @key(name: "userByEmail", fields: ["email"], queryField: "userByEmail") {
  id: ID!
  userRole: String!
  firstName: String!
  lastName: String!
  avatarImage: String!
  phoneNumber: String!
  email: String!
  chatUsers: [ChatUser] @connection(keyName: "byUser", fields: ["id"])
  test: String
  #registerDate: AWSDateTime!
  leaseTenantHistory: [LeaseTenant]
    @connection(keyName: "byUser", fields: ["id"])
  leaseLandlordHistory: [LeaseLandlord]
    @connection(keyName: "byUser", fields: ["id"])
  events: [Event] @connection(keyName: "byUser", fields: ["id"])
}

type LeaseTenant
  @model
  @key(name: "byUser", fields: ["userID"])
  @key(name: "byLeaseTerm", fields: ["leaseTermID"]) {
  id: ID!
  userID: ID!
  leaseTermID: ID!
  user: User! @connection(fields: ["userID"])
  leaseTerm: LeaseTerm! @connection(fields: ["leaseTermID"])
  status: String!
}

type LeaseLandlord
  @model
  @key(name: "byUser", fields: ["userID"])
  @key(name: "byLeaseTerm", fields: ["leaseTermID"]) {
  id: ID!
  userID: ID!
  leaseTermID: ID!
  user: User! @connection(fields: ["userID"])
  leaseTerm: LeaseTerm! @connection(fields: ["leaseTermID"])
  status: String!
}

type LeaseTerm @model @key(name: "byProperty", fields: ["propertyID"]) {
  id: ID!
  property: Property @connection(fields: ["propertyID"])
  propertyID: ID!
  tenants: [LeaseTenant] @connection(keyName: "byLeaseTerm", fields: ["id"])
  landlords: [LeaseLandlord] @connection(keyName: "byLeaseTerm", fields: ["id"])
  termStartDate: AWSDate!
  termEndDate: AWSDate!
  status: String!
}

type Property
  @model
  @key(
    name: "propertyByAddress"
    fields: ["address"]
    queryField: "propertyByAddress"
  ) {
  id: ID!
  address: String!
  leaseHistory: [LeaseTerm] @connection(keyName: "byProperty", fields: ["id"])
}

type ChatUser
  @model
  @key(name: "byUser", fields: ["userID"])
  @key(name: "byChatRoom", fields: ["chatRoomID"]) {
  id: ID!
  userID: ID!
  user: User! @connection(fields: ["userID"])
  chatRoomID: ID!
  chatRoom: ChatRoom! @connection(fields: ["chatRoomID"])
}

type ChatRoom @model {
  id: ID!
  chatUsers: [ChatUser] @connection(keyName: "byChatRoom", fields: ["id"])
  chatMessages: [ChatMessage] @connection(keyName: "byChatRoom", fields: ["id"])
}

type ChatMessage
  @model
  #@key(name: "messageByTime", fields: ["chatRoomID", "createdAt"], queryField: "messageByTime")
  @key(name: "byChatRoom", fields: ["chatRoomID", "content"], queryField: "messageByChatRoom") {
  id: ID!
  userID: ID!
  content: String!
  chatRoomID: ID!
  createdAt: String! # Amplify fills this in

}

type Event @model @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  userID: ID!
  title: String!
  action: String!
  startTime: AWSDateTime
  endTime: AWSDateTime
}

type Subscription {
  onCreateChatMessageByChatRoomID(chatRoomID: ID!): ChatMessage
    @aws_subscribe(mutations: ["createChatMessage"])
}

# type RatingReport @model {
#}

#type RatingCriteria @model {
#  criteria: String!
#  score: Int!
#  description: String
#  photosOrVideos: [String]
#}

#    - UserAccount
#        - Role String! //Landlord or tenant, possibly administrator and workers etc.
#        - PersonalInfo: PersonalInfo
#        - RatingProfile: RatingProfile!
#        - RatingHistory: [RateReport]
#        - AccountPreference: AccountPreference!
#        - LikedPropertyFolders: [PropertyFolder]
#        - CurrentLease: Lease!
#        - LeaseHistory: [Lease]
#        - PreferredPaymentMethod: String!
#        - PaymentHistory: [PaymentRecord]
#   - PersonalInfo
#        - First Name
#        - Last Name
#        - Phone Number, verified?
#        - Email, verified?
#        - Avatar Image
#        - Register date
